[["index.html", "Data: The Mungening Preface", " Data: The Mungening Sara Haman, Miles Tweed, Conor Howlett, Kevin Howlett 2020-11-18 Preface This project was created to fulfil the requirements of the Fall 2020 Data Munging and Exploratory Data Analysis at New College of Florida. The focus of the project was to produce effective visualizations to accompany the exploratory data analysis process. This bookdown is divided so that each step in the process is its own chapter, so that the reader can walk with us through our work flow. In the first chapter, we present an overview of the project and background information on the topic: the card game, Magic the Gathering. In the second chapter, we explain how we gathered the data and why we chose to combine data from multiple sources. In the third, we assess the data quality metrics for the initial data pulls. These are generated both through objective functions and through interrater scoring. In the fourth, we provide theh code used to clean the data. The analysis of the data spans the fifth and sixth chapters. In chapter five, we provide descriptive statistics for the variables of interest. In chapter six, we provide an in-depth examination of several aspects of the data in order to parse out potential relationships of interest. The results of these analysis are discussed throughout the text. The final chapter is the discussion, wherein we summarize the key findings and discuss our personal take-aways. "],["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction Magic: The Gathering is a collectible card game that has entertained millions since its inception in 1993. Over the past 27 years, there have been hundreds of sets, and tens of thousands of cards printed, each showcasing distinct artworks, attributes and flavor text. Players engage in competitive games using these cards, in a fantastical, strategic battle that tests a players skill, experience and deck-building ability. Subsequently, the long standing popularity of the game has driven up demand for buying, trading and selling cards through card shops and online retailers. Because of this, there are online records for many of these cards and their respective attributes. From a data standpoint, Magic: The Gathering becomes a perfect candidate for some fun, and rewarding exploratory data analysis. "],["data-the-gathering.html", "Chapter 2 Data the Gathering 2.1 2019 Market Data 2.2 2020 Market Data", " Chapter 2 Data the Gathering Magic the Gathering cards represent a constantly fluctuating ecosystem of distinct cards and market demand. New sets of cards are released multiple times a year, and since the features of the new cards influence how applicable older cards are to the evolving game, the prestige of the cards is constantly changing. The cards also exist in different mediums.There is an online version of Magic the Gathering which accompanies the classical printed card game. The cost of cards between these mediums fluctuates widely, as there is obviously a limited supply of printed cards. Given this information, we thought that it was necessary to examine up-to-date market prices about the cards. This is where we reached an impasse, data collection-wise. We built a scraper that could pull up-to-date market data off of the official Magic the Gathering card market but, because of the data included in the card market, scant information about the cards themselves could be pulled from this site. Detailed card information could be found at MTGJSON (https://mtgjson.com/), a website dedicated to scraping current information about all of the Magic the Gathering Cards. However, the most recent market data they had was pulled at the end of 2019. Because the card markets fluctuate, we did not believe that data pulled in 2019 could provide us with the most accurate information about current trends between features of Magic the Gathering cards and their prices. So, we decided to use both of these data sets and combine them where we could. The data from the cards was downloaded from MTGJSON in CSV format and cleaned in R. We combined information about the cards and the sets they belong to in order to provide a holistic view of the cards. You can download the data for the cards {here}(https://github.com/sarahaman/MtG_Group_Project/blob/main/cards.csv) and for the sets {here}(https://github.com/sarahaman/MtG_Group_Project/blob/main/sets.csv). The market data was not immediately accessible in a format that could be transfered directly into R. Because the members of our team were unfamiliar with both web-scraping and JSON-wrangling in R, we utilized Python and MongoDB to access the raw data and transform into usable CSVs. These CSVs were then cleaned and formatted for analysis in R. For the sake of replicability, we have provided links to the annotated Python scripts used to convert the raw data into a format that could be processed in R. The raw data can be downloaded from the following Github Repository: {MtG_Group_Project}(https://github.com/sarahaman/MtG_Group_Project). 2.1 2019 Market Data {Click here!}(https://github.com/sarahaman/MtG_Group_Project/blob/main/tocsv.ipynb) 2.2 2020 Market Data {Click here!}(https://github.com/sarahaman/MtG_Group_Project/blob/main/MTG_market_webscrape.py) "],["data-quality-metrics.html", "Chapter 3 Data Quality Metrics 3.1 Set-up 3.2 The Functions 3.3 Quality Assessments", " Chapter 3 Data Quality Metrics First, I import the packages that I use in this section and read in the uncleaned data. 3.1 Set-up 3.2 The Functions 3.3 Quality Assessments We assessed data quality using the metrics outlined in Pipino, Lee, and Wang (2002). For each of these metrics, we provide a brief commentary on how the data fared. Several of the data quality metrics were more pertinent to our analysis, so we provide deeper insight into them. "],["data-cleaning.html", "Chapter 4 Data Cleaning 4.1 Packages 4.2 The Cleaning Script", " Chapter 4 Data Cleaning 4.1 Packages ############################################### ########## ### LIBRARIES ### ########## ############################################### library(tidyverse) library(plotly) library(ggplot2) library(gganimate) library(magick) library(gifski) library(png) library(knitr) library(PerformanceAnalytics) library(ggpubr) library(lubridate) library(ggthemes) library(extrafont) library(tm) 4.2 The Cleaning Script The script below reads in the csvs needed and, at the end, outputs a merged CSV file containing the card and 2019 prices data joined by applicable columns. The inline comments explain what the script is doing at each stage. This data will later be compared with the 2020 price data, which is fundamentally a very different data set, though it has some variables that can be directly compared. This will be expanded on during the analysis. ############################################### ########## ### CARDS ### ########## ############################################### # READING IN THE DATA cardsRaw &lt;- read_csv(&quot;cards.csv&quot;, col_names = TRUE) # head(cardsRaw) #SELECTING RELEVANT COLUMNS keepCols &lt;- c(&quot;uuid&quot;, &quot;mcmId&quot;, &quot;mtgjsonV4Id&quot;, &quot;multiverseId&quot;, &quot;name&quot;, &quot;artist&quot;, &quot;type&quot;, &quot;subtypes&quot;, &quot;supertypes&quot;, &quot;manaCost&quot;, &quot;convertedManaCost&quot;, &quot;keywords&quot;, &quot;text&quot;, &quot;flavorText&quot;, &quot;power&quot;, &quot;toughness&quot;, &quot;rarity&quot;, &quot;edhrecRank&quot;, &quot;isOnlineOnly&quot;) cards &lt;- select_(cardsRaw, .dots = keepCols) # head(cards) # CLEANING TYPES cards$type &lt;- word(cards$type, 1, sep=&quot; &quot;) # REMOVING SPECIAL CHARACTERS FROM THE TEXT VARIABLES cards$text &lt;- str_replace_all(cards$text, &quot;[[:punct:]]&quot;, &quot;&quot;) cards$flavorText &lt;- str_replace_all(cards$flavorText, &quot;[[:punct:]]&quot;, &quot;&quot;) # CLEANING THE MANA CLUSTERF**K # If the manaCost is NA, replace it with Z so that it can be processed by str_detect. Converted back later. cards$manaCost &lt;- replace_na(cards$manaCost, &quot;Z&quot;) #Removing the brackets cards$manaCost = str_replace_all(cards$manaCost, &quot;[{}]&quot;, &quot;&quot;) #Creating a variable to hold the &#39;generic&#39; mana cost cards$genericManaCost &lt;- NA # Counting the generic mana cost for each row # If X is included in the data, that means the # of generic mana is determined by the game environment c = 1 for (i in cards$manaCost){ a = str_detect(i, &quot;.*[0-9].*&quot;) if ( a == TRUE){ if (substr(i, start = 1, stop = 1) == &#39;X&#39;){ cards$genericManaCost[c] &lt;- &quot;Determined in Game&quot; } else { cards$genericManaCost[c] &lt;- substr(i, start = 1, stop = 1) } } else { cards$genericManaCost[c] &lt;- &quot;No Generic Cost&quot; } c = c + 1 } # Cleaning manaCost to remove data pertaining to generic mana cards$manaCost &lt;- str_replace_all(cards$manaCost, &#39;X&#39;, &#39;&#39;) %&gt;% removeNumbers() # HANDLING CARD COLOR # Creating the color variable cards$manaColor &lt;- NA # Splitting the letters so that they can be compared, these are put in a temporary variable cards$temp &lt;- str_split(cards$manaCost, &quot;&quot;) # Identifying the mana color # If the card deals with more than one type of mana, it is assigned to the category &quot;Multiple Types&quot; c = 1 for (i in cards$temp){ if (length(i) &lt;= 1){ cards$manaColor[c] &lt;- i[1] } else if(i[1] == i[2]) { cards$manaColor[c] &lt;- i[1] } else { cards$manaColor[c] &lt;- &quot;Multiple Types&quot; } c = c+1 } # Colored mana cost is calculated by simply taking the length of the manaCost string (i.e., WWW would be 3) cards$colorManaCost &lt;- nchar(cards$manaCost) #Handling NA&#39;s cards$manaColor[is.na(cards$manaColor)] &lt;- &quot;No Color&quot; cards$manaColor[cards$manaColor == &#39;Z&#39;] &lt;- &quot;No Color&quot; cards$colorManaCost &lt;- ifelse(cards$manaColor == &quot;No Color&quot;, &quot;No Color Cost&quot;, cards$colorManaCost) #Removing the depreciated columns cards &lt;- subset(cards, select = -c(temp, manaCost)) ############################################### ########## ### SETS ### ########## ############################################### # READING IN THE DATA setsRaw &lt;- read_csv(&quot;sets.csv&quot;, col_names = TRUE) # head(setsRaw) #SELECTING RELEVANT COLUMNS keepColsSets &lt;- c(&quot;mcmId&quot;, &quot;name&quot;, &quot;releaseDate&quot;) sets &lt;- select_(setsRaw, .dots = keepColsSets) %&gt;% rename( &quot;setName&quot; = &quot;name&quot; ) sets &lt;- sets[!is.na(sets$mcmId), ] ############################################### ########## ### JOIN ### ########## ############################################### # Joining cards with sets on MCM ID mtg &lt;- left_join(cards, sets, by = &quot;mcmId&quot;) # head(mtg) # sum(is.na(mtg$releaseDate)) # write.csv(mtg, &quot;cleanData.csv&quot;) 4.2.1 Post-Download Formatting Because certain facets of the data cannot be retained when the data is formatted as a .CSV, we produced a post-download formatting block which can be copied and pasted in at the beginning of any R file using the above CSV to convert the data to the ideal format for manipulation. # TOKENIZING SUBTYPES mtg$subtypes &lt;- str_split(mtg$subtypes, &quot;,&quot;) # TOKENIZING KEYWORDS mtg$keywords &lt;- str_split(mtg$keywords, &quot;,&quot;) # TURNING RARITY INTO A FACTOR mtg$rarity &lt;- factor(mtg$rarity, levels = c(&quot;common&quot;, &quot;uncommon&quot;, &quot;rare&quot;, &quot;mythic&quot;), ordered = TRUE) #FORMATTING POWER AND TOUGHNESS CORRECTLY # forces some to numeric, however upon investigation the cards turned to NA&#39;s are &#39;booster&#39; cards, which are like spell cards # these cards can be identified by their key words mtg$power &lt;- as.numeric(mtg$power) ## Warning: NAs introduced by coercion mtg$toughness &lt;- as.numeric(mtg$toughness) ## Warning: NAs introduced by coercion head(mtg, 20) ## # A tibble: 20 x 23 ## uuid mcmId mtgjsonV4Id multiverseId name artist type subtypes supertypes ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;list&gt; &lt;chr&gt; ## 1 3851~ 16413 1669af17-d~ 130483 Abun~ Rebec~ Ench~ &lt;chr [1~ &lt;NA&gt; ## 2 b8a6~ 16227 047d5499-a~ 132072 Acad~ Steph~ Crea~ &lt;chr [2~ &lt;NA&gt; ## 3 1172~ 16511 ee19938c-4~ 129458 Adar~ John ~ Land &lt;chr [1~ &lt;NA&gt; ## 4 9acf~ 16289 8774e18f-3~ 135206 Affl~ Roger~ Inst~ &lt;chr [1~ &lt;NA&gt; ## 5 0dea~ 16414 4e875bca-0~ 130525 Aggr~ Chris~ Inst~ &lt;chr [1~ &lt;NA&gt; ## 6 4429~ 16290 13fbd62d-8~ 135228 Agon~ Adam ~ Sorc~ &lt;chr [1~ &lt;NA&gt; ## 7 76dd~ 16228 2854f284-9~ 129459 Air ~ Kev W~ Crea~ &lt;chr [1~ &lt;NA&gt; ## 8 76d4~ 16228 9d9ce25a-f~ NA Air ~ Kev W~ Crea~ &lt;chr [1~ &lt;NA&gt; ## 9 2972~ 16229 f9db3498-1~ 129913 Amba~ Jim M~ Lege~ &lt;chr [2~ Legendary ## 10 5119~ 16351 fe4aa077-8~ 134753 Anab~ Greg ~ Crea~ &lt;chr [1~ &lt;NA&gt; ## 11 0809~ 16351 067159f1-c~ NA Anab~ Greg ~ Crea~ &lt;chr [1~ &lt;NA&gt; ## 12 5f82~ 16165 ad41be73-5~ 130550 Ance~ Pete ~ Crea~ &lt;chr [2~ &lt;NA&gt; ## 13 b7c1~ 16165 fcd5d3ab-d~ NA Ance~ Pete ~ Crea~ &lt;chr [2~ &lt;NA&gt; ## 14 57aa~ 16166 9eb2e54c-a~ 129465 Ange~ Volka~ Crea~ &lt;chr [1~ &lt;NA&gt; ## 15 8fd4~ 16166 e2be2630-a~ NA Ange~ Volka~ Crea~ &lt;chr [1~ &lt;NA&gt; ## 16 da0a~ 16475 cf706172-3~ 129466 Ange~ Alan ~ Arti~ &lt;chr [1~ &lt;NA&gt; ## 17 55bd~ 16167 8fb2ccd5-7~ 129711 Ange~ Mark ~ Sorc~ &lt;chr [1~ &lt;NA&gt; ## 18 c565~ 16167 53438513-1~ NA Ange~ Mark ~ Sorc~ &lt;chr [1~ &lt;NA&gt; ## 19 3b77~ 16168 bef2dc94-7~ 129710 Ange~ Jim M~ Ench~ &lt;chr [1~ &lt;NA&gt; ## 20 fadd~ 16169 cff007ed-d~ 129671 Ange~ John ~ Crea~ &lt;chr [1~ &lt;NA&gt; ## # ... with 14 more variables: convertedManaCost &lt;dbl&gt;, keywords &lt;list&gt;, ## # text &lt;chr&gt;, flavorText &lt;chr&gt;, power &lt;dbl&gt;, toughness &lt;dbl&gt;, rarity &lt;ord&gt;, ## # edhrecRank &lt;dbl&gt;, isOnlineOnly &lt;dbl&gt;, genericManaCost &lt;chr&gt;, ## # manaColor &lt;chr&gt;, colorManaCost &lt;chr&gt;, setName &lt;chr&gt;, releaseDate &lt;date&gt; "],["descriptive-statistics.html", "Chapter 5 Descriptive Statistics 5.1 Set-up 5.2 Descriptives 5.3 Distribution of Prices 5.4 Correlation of Numerical Data 5.5 Printing type 5.6 Frame Version 5.7 Release Date 5.8 Rarity", " Chapter 5 Descriptive Statistics 5.1 Set-up # cleaned Card data with price data cards &lt;- read_csv(&#39;AllCardsAlt.csv&#39;) ## Parsed with column specification: ## cols( ## .default = col_character(), ## X1 = col_double(), ## convertedManaCost = col_double(), ## edhrecRank = col_double(), ## frameVersion = col_double(), ## hasFoil = col_logical(), ## hasNonFoil = col_logical(), ## isMtgo = col_logical(), ## isPaper = col_logical(), ## isReprint = col_logical(), ## releaseDate = col_date(format = &quot;&quot;), ## isStarter = col_logical(), ## mtgo = col_double(), ## mtgoFoil = col_double(), ## paper = col_double(), ## paperFoil = col_double() ## ) ## See spec(...) for full column specifications. cards &lt;- tibble(cards) cards &lt;- cards[,-1] cards &lt;- cards %&gt;% mutate(&#39;year&#39; = format(cards$releaseDate, format=&#39;%Y&#39;)) cards$year &lt;- cards$year %&gt;% as.character() cards$frameVersion &lt;- cards$frameVersion %&gt;% as.character() 5.2 Descriptives The following table gives an overview of the numerical variables. The variable convertedManaCost is an aspect of the card that is used in play. The variable edhrecRank is a score given to the card by the website EDHREC which provides card information. The last four variables (mtgo, mtgoFoil, paper, and paperFoil) are different printing of the cards. Mtgo and mtgoFoil are digital versions of the cards whereas paper and paperFoil are physical. The distribution is heavily skewed with a majority of the cards in the low price range with a few extremely high prices outliers. convertedManaCost edhrecRank mtgo mtgoFoil paper paperFoil minimum 0.000000e+00 1.000 0.0000000 0.0000000 0.000000e+00 0.000000 lower-hinge 2.000000e+00 2759.000 0.0000000 0.0000000 3.000000e-02 0.000000 median 3.000000e+00 7445.500 0.0100000 0.0100000 1.400000e-01 0.120000 upper-hinge 4.000000e+00 13105.000 0.0300000 0.0300000 4.521053e-01 0.900000 maximum 1.000000e+06 19281.000 345.0200000 100.6400000 1.499900e+04 4159.831579 mean 4.469705e+01 8113.562 0.2491689 0.3159343 6.993864e+00 3.626086 standard deviation 6.463173e+03 5822.852 2.5891530 1.8520141 1.297658e+02 27.271963 5.3 Distribution of Prices Every type of card printing followed the same type of right skewed price distribution. The vast majority of the cards are priced in the lower range with some exreme outliers. p1 &lt;- cards[,&#39;paper&#39;] %&gt;% ggplot() + geom_histogram(aes(x=paper, fill=I(&#39;darkgreen&#39;)), bins = 10) + labs(title = &#39;Price Distribution of Paper&#39;) p2 &lt;- cards[,&#39;paperFoil&#39;] %&gt;% ggplot() + geom_histogram(aes(x=paperFoil, fill=I(&#39;darkgreen&#39;)), bins = 10) + labs(title = &#39;Price Distribution of Paper Foil&#39;) p3 &lt;- cards[,&#39;mtgo&#39;] %&gt;% ggplot() + geom_histogram(aes(x=mtgo, fill=I(&#39;darkgreen&#39;)), bins = 10) + labs(title = &#39;Price Distribution of Digital&#39;) p4 &lt;- cards[,&#39;mtgoFoil&#39;] %&gt;% ggplot() + geom_histogram(aes(x=mtgoFoil, fill=I(&#39;darkgreen&#39;)), bins = 10) + labs(title = &#39;Price Distribution of Digital Foil&#39;) ggarrange(p1,p2,p3,p4,nrow=2,ncol=2) The following displays the distribution at the lower range of price (&lt;$10). p1 &lt;- cards[,&#39;paper&#39;] %&gt;% filter(paper &lt; 10) %&gt;% ggplot() + geom_histogram(aes(x=paper, fill=I(&#39;darkgreen&#39;)), bins=30) + labs(title = &#39;Price Distribution of Paper&#39;) p2 &lt;- cards[,&#39;paperFoil&#39;] %&gt;% filter(paperFoil &lt; 10) %&gt;% ggplot() + geom_histogram(aes(x=paperFoil, fill=I(&#39;darkgreen&#39;)), bins=30) + labs(title = &#39;Price Distribution of Paper Foil&#39;) p3 &lt;- cards[,&#39;mtgo&#39;] %&gt;% filter(mtgo &lt; 10) %&gt;% ggplot() + geom_histogram(aes(x=mtgo, fill=I(&#39;darkgreen&#39;)), bins=30) + labs(title = &#39;Price Distribution of Digital&#39;) p4 &lt;- cards[,&#39;mtgoFoil&#39;] %&gt;% filter(mtgoFoil &lt; 10) %&gt;% ggplot() + geom_histogram(aes(x=mtgoFoil, fill=I(&#39;darkgreen&#39;)), bins=30) + labs(title = &#39;Price Distribution of Digital Foil&#39;) ggarrange(p1,p2,p3,p4,nrow=2,ncol=2) 5.4 Correlation of Numerical Data None of the numerical categories show much correlation with the price variables. cards %&gt;% sample_n(5000) %&gt;% select_if(is.numeric) %&gt;% chart.Correlation() 5.5 Printing type The following is a comparison of how cards price in one type of printing corresponds to its price in another type of printing. Often, higher prices in one type of printing correspond to higher prices in another. q1 &lt;- cards[,c(&quot;name&quot;,&quot;paper&quot;,&quot;paperFoil&quot;)] %&gt;% filter(paper &gt; 0 &amp; paperFoil &gt; 0)%&gt;% group_by(name) %&gt;% ggplot(aes(x = paper, y = paperFoil)) + geom_point() + geom_smooth() q2 &lt;- cards[,c(&quot;name&quot;,&quot;paper&quot;,&quot;mtgo&quot;)] %&gt;% filter(paper &gt; 0 &amp; mtgo &gt; 0)%&gt;% group_by(name) %&gt;% ggplot(aes(x = paper, y = mtgo)) + geom_point() + geom_smooth() q3 &lt;- cards[,c(&quot;name&quot;,&quot;paperFoil&quot;,&quot;mtgoFoil&quot;)] %&gt;% filter(paperFoil &gt; 0 &amp; mtgoFoil&gt;0) %&gt;% group_by(name) %&gt;% ggplot(aes(x = paperFoil, y = mtgoFoil)) + geom_point() + geom_smooth() q4 &lt;- cards[,c(&quot;name&quot;,&quot;mtgo&quot;,&quot;mtgoFoil&quot;)] %&gt;% filter(mtgo &gt; 0 &amp; mtgoFoil&gt;0) %&gt;% group_by(name) %&gt;% ggplot(aes(x = mtgo, y = mtgoFoil)) + geom_point() + geom_smooth() q5 &lt;- cards[,c(&quot;name&quot;,&quot;paper&quot;,&quot;mtgoFoil&quot;)] %&gt;% filter(paper &gt; 0 &amp; mtgoFoil&gt;0) %&gt;% group_by(name) %&gt;% ggplot(aes(x = paper, y = mtgoFoil)) + geom_point() + geom_smooth() q6 &lt;- cards[,c(&quot;name&quot;,&quot;mtgo&quot;,&quot;paperFoil&quot;)] %&gt;% filter(mtgo &gt; 0 &amp; paperFoil&gt;0) %&gt;% group_by(name) %&gt;% ggplot(aes(x = mtgo, y = paperFoil)) + geom_point() + geom_smooth() ggarrange(q1,q2,q3,q4,q5,q6,ncol=2,nrow=3) ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; 5.6 Frame Version The frame version variable describes the style of the border around the card and is named by year. The earliest version of the frame is dominated by the paper card type. The later frame versions show that physical cards fetch higher prices on average with the foil versions fetch the highest price. # prices by frameVersion (Version of the card frame style.) cards[,c(&quot;frameVersion&quot;,&quot;mtgo&quot;,&quot;mtgoFoil&quot;,&quot;paper&quot;,&quot;paperFoil&quot;)] %&gt;% gather(mtgo,mtgoFoil,paper,paperFoil, key=&#39;paperType&#39;, value=&#39;price&#39;, na.rm = T) %&gt;% filter(!is.na(frameVersion)) %&gt;% group_by(frameVersion,paperType) %&gt;% summarise_at(&#39;price&#39;,mean,rm.na = T) %&gt;% ggplot(aes(x = frameVersion, y = price, fill=paperType)) + geom_col(position=&#39;dodge&#39;) + labs(title=&#39;Mean Prices By Frame Version&#39;, fill=&#39;Printing&#39;) + xlab(&#39;Frame Version&#39;) 5.7 Release Date The cards with the earliest release date fetch the highest prices by far followed by the cards released in 2001. The graph of the proportion of printings shows that foil cards begin to dominate the field around 1999. Interestingly, the 2001 release year had the greatest proportion of foil cards which may factor into the reason why that year had the second highest average price #mean price by release date and printing type cards %&gt;% gather(mtgo,mtgoFoil,paper,paperFoil, key=&#39;paperType&#39;, value=&#39;price&#39;) %&gt;% group_by(year, paperType) %&gt;% summarise_at(&#39;price&#39;,mean,rm.na=T) %&gt;% ggplot(aes(x = year, y = price, fill=paperType)) + geom_col() + theme(axis.text.x = element_text(angle = 45)) + labs(title=&#39;Mean Price By Year And Printing&#39;, fill=&#39;Printing&#39;) #mean price by release date and printing type excluding the outlier cards %&gt;% gather(mtgo,mtgoFoil,paper,paperFoil, key=&#39;paperType&#39;, value=&#39;price&#39;) %&gt;% group_by(year, paperType) %&gt;% filter(year != &#39;1993&#39;) %&gt;% summarise_at(&#39;price&#39;,mean,rm.na=T) %&gt;% ggplot(aes(x = year, y = price, fill=paperType)) + geom_col() + theme(axis.text.x = element_text(angle = 45)) + labs(title=&#39;Mean Price By Year (&gt;1993) And Printing&#39;, fill=&#39;Printing&#39;) # proportion of mean price by release date and printing type cards %&gt;% gather(mtgo,mtgoFoil,paper,paperFoil, key=&#39;paperType&#39;, value=&#39;price&#39;) %&gt;% group_by(year, paperType) %&gt;% summarise_at(&#39;price&#39;,mean,rm.na=T) %&gt;% ggplot(aes(x = year, y = price, fill=paperType)) + geom_col(position=&#39;fill&#39;) + theme(axis.text.x = element_text(angle = 45)) + labs(title=&#39;Proportion of Average Price By Year And Printing&#39;, fill=&#39;Printing&#39;) 5.8 Rarity In the plot of mean price by rarity, the physical cards fetch a higher price than the digital versions. The mythic paper cards with foil fetch the highest price on average followed by the rare paper cards. # rarity vs price cards[,c(&quot;rarity&quot;,&quot;mtgo&quot;,&quot;mtgoFoil&quot;,&quot;paper&quot;,&quot;paperFoil&quot;)] %&gt;% gather(mtgo,mtgoFoil,paper,paperFoil, key=&#39;paperType&#39;, value=&#39;price&#39;, na.rm = T) %&gt;% group_by(rarity,paperType) %&gt;% summarise_at(&#39;price&#39;,mean,rm.na = T) %&gt;% plot_ly( x = ~rarity, y = ~price, color = ~paperType, type =&#39;bar&#39;, mode =&#39;marker&#39; ) %&gt;% layout( title = list(text = &#39;Mean price by rarity and card type&#39;, x=0.02) ) However, the rare physical cards fetched the highest prices overall by far. # rarity vs price cards[,c(&quot;rarity&quot;,&quot;mtgo&quot;,&quot;mtgoFoil&quot;,&quot;paper&quot;,&quot;paperFoil&quot;)] %&gt;% gather(mtgo,mtgoFoil,paper,paperFoil, key=&#39;paperType&#39;, value=&#39;price&#39;, na.rm = T) %&gt;% group_by(rarity,paperType) %&gt;% summarise_at(&#39;price&#39;,max,rm.na = T) %&gt;% plot_ly( x = ~rarity, y = ~price, color = ~paperType, type =&#39;bar&#39;, mode =&#39;marker&#39; ) %&gt;% layout( title = list(text = &#39;Maximum price by rarity and card type&#39;, x=0.02) ) "],["feature-analysis.html", "Chapter 6 Feature Analysis 6.1 Prices 6.2 Artist Influence 6.3 Game Mechanics 6.4 Text Features", " Chapter 6 Feature Analysis 6.1 Prices 6.2 Artist Influence 6.3 Game Mechanics 6.4 Text Features "],["discussion.html", "Chapter 7 Discussion 7.1 Conclusion 7.2 Future Directions 7.3 What We Learned Along the Way", " Chapter 7 Discussion 7.1 Conclusion 7.2 Future Directions 7.3 What We Learned Along the Way "]]
